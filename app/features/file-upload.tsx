/**
 * This code was generated by v0 by Vercel.
 * @see https://v0.dev/t/zEVKGfNWy1z
 * Documentation: https://v0.dev/docs#integrating-generated-code-into-your-nextjs-app
 */

/** Add fonts into your Next.js project:

import { Inter } from 'next/font/google'

inter({
  subsets: ['latin'],
  display: 'swap',
})

To read more about using these font, please visit the Next.js documentation:
- App Directory: https://nextjs.org/docs/app/building-your-application/optimizing/fonts
- Pages Directory: https://nextjs.org/docs/pages/building-your-application/optimizing/fonts
**/

'use client';

import { Button } from '@/components/ui/button';
import Image from 'next/image';
import { ChangeEvent, DragEvent, SVGProps, useRef, useState } from 'react';
import { getFileSizeWithUnit, fileToBase64 } from '@/app/utils/fileUtils';
import { useMutation } from 'urql';
import { toast } from 'sonner';

const uploadMutation = `
  mutation UploadFile($encodedFile: String!) {
    upload(encodedFile: $encodedFile) {
      statusCode
    }
  }
`;

export function FileUpload() {
  const [result, upload] = useMutation(uploadMutation);

  const inputRef = useRef<HTMLInputElement>(null);

  const handleClick = () => inputRef.current?.click();

  const [file, setFile] = useState<File>();

  const [fileSize, sizeUnit] = file ? getFileSizeWithUnit(file.size) : [];

  const handleChange = (e: ChangeEvent<HTMLInputElement>) => {
    const file = e?.target?.files ? e.target.files[0] : null;
    if (!file) return;

    setFile(file);
  };

  const handleDragEnter = (e: DragEvent<HTMLDivElement>) => {
    e.stopPropagation();
    e.preventDefault();

    e.currentTarget?.classList.toggle('bg-gray-200');
  };

  const handleDragOver = (e: DragEvent<HTMLDivElement>) => {
    e.preventDefault();
  };

  const handleDragLeave = (e: DragEvent<HTMLDivElement>) => {
    e.stopPropagation();
    e.preventDefault();

    e.currentTarget?.classList.toggle('bg-gray-200');
  };

  const handleDrop = async (e: DragEvent<HTMLDivElement>) => {
    e.stopPropagation();
    e.preventDefault();

    e.currentTarget?.classList.toggle('bg-gray-200');
    const files = e.dataTransfer.files;

    if (files.length > 1) return alert('アップロードできるファイルは1つだけです。');

    setFile(files[0]);
  };

  const handleSubmit = async () => {
    const encodedFile = file ? await fileToBase64(file) : '';

    const variables = { encodedFile };

    toast.promise(
      () =>
        upload(variables).then((result) => {
          if (result.error) {
            throw new Error(result.error.message);
          }

          setFile(undefined);
        }),
      {
        loading: 'In progress...',
        success: 'File pload completed!',
        error: 'Failed to file upload',
      },
    );
  };

  return (
    <div className='mx-auto max-w-md space-y-6 mt-10'>
      <div className='space-y-2 text-center'>
        <h2 className='text-2xl font-bold'>Upload Attendance File</h2>
        <p className='text-gray-500 dark:text-gray-400'>
          Drag and drop a file or click to select a file from your device.
        </p>
      </div>
      <div
        className='rounded-md border border-gray-300 dark:border-gray-700 p-6 space-y-4'
        onDragEnter={handleDragEnter}
        onDragOver={handleDragOver}
        onDragLeave={handleDragLeave}
        onDrop={handleDrop}
      >
        <div>
          <div className='flex flex-col items-center justify-center space-y-2'>
            <UploadIcon className='h-8 w-8 text-gray-500 dark:text-gray-400' />
            <p className='text-sm text-gray-500 dark:text-gray-400'>Drag and drop a file or click to select a file</p>
            <Button size='sm' variant='outline' onClick={handleClick}>
              Select File
            </Button>
            <input type='file' accept='application/pdf' hidden ref={inputRef} onChange={handleChange} name='pdf' />
          </div>
        </div>
        {file && (
          <div className='grid gap-4'>
            <div className='flex items-center gap-4'>
              <Image
                alt='File thumbnail'
                className='rounded-md object-cover'
                height={40}
                src='/file.svg'
                style={{
                  aspectRatio: '40/40',
                  objectFit: 'cover',
                }}
                width={40}
              />
              <div className='flex-1'>
                <div className='font-medium'>{file.name}</div>
                <div className='text-sm text-gray-500 dark:text-gray-400'>
                  {fileSize}
                  {sizeUnit}
                </div>
              </div>
              <Button size='icon' variant='ghost'>
                <XIcon className='h-5 w-5' onClick={() => setFile(undefined)} />
                <span className='sr-only'>Remove file</span>
              </Button>
            </div>
          </div>
        )}
        <Button className='w-full' onClick={handleSubmit} disabled={!file || result.fetching}>
          Upload
        </Button>
      </div>
    </div>
  );
}

function UploadIcon(props: SVGProps<SVGSVGElement>) {
  return (
    <svg
      {...props}
      xmlns='http://www.w3.org/2000/svg'
      width='24'
      height='24'
      viewBox='0 0 24 24'
      fill='none'
      stroke='currentColor'
      strokeWidth='2'
      strokeLinecap='round'
      strokeLinejoin='round'
    >
      <path d='M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4' />
      <polyline points='17 8 12 3 7 8' />
      <line x1='12' x2='12' y1='3' y2='15' />
    </svg>
  );
}

function XIcon(props: SVGProps<SVGSVGElement>) {
  return (
    <svg
      {...props}
      xmlns='http://www.w3.org/2000/svg'
      width='24'
      height='24'
      viewBox='0 0 24 24'
      fill='none'
      stroke='currentColor'
      strokeWidth='2'
      strokeLinecap='round'
      strokeLinejoin='round'
    >
      <path d='M18 6 6 18' />
      <path d='m6 6 12 12' />
    </svg>
  );
}
